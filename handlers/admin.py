import logging
from aiogram import Router
from aiogram.types import Message
from db import get_connection

router = Router()


@router.message(lambda m: m.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
async def start_game(message: Message):
    try:
        conn = get_connection()
        cur = conn.cursor(dictionary=True)

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–≥—Ä—É
        cur.execute("SELECT id, status FROM games ORDER BY id DESC LIMIT 1")
        game = cur.fetchone()

        if not game:
            await message.answer("‚ö†Ô∏è –í –±–∞–∑–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∏–≥—Ä—ã.")
            conn.close()
            return

        if game["status"] == "in_progress":
            await message.answer("‚è≥ –ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")
            conn.close()
            return

        if game["status"] == "finished":
            await message.answer("üèÅ –≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")
            conn.close()
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
        cur.execute("""
            UPDATE games
            SET status = 'in_progress', started_at = NOW()
            WHERE id = %s
        """, (game["id"],))
        conn.commit()
        conn.close()

        await message.answer("‚úÖ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã: {e}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


@router.message(lambda m: m.text == "–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É")
async def stop_game(message: Message):
    try:
        conn = get_connection()
        cur = conn.cursor(dictionary=True)

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–≥—Ä—É
        cur.execute("SELECT id, status FROM games ORDER BY id DESC LIMIT 1")
        game = cur.fetchone()

        if not game:
            await message.answer("‚ö†Ô∏è –í –±–∞–∑–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∏–≥—Ä—ã.")
            conn.close()
            return

        if game["status"] == "finished":
            await message.answer("üèÅ –ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            conn.close()
            return

        if game["status"] == "not_started":
            await message.answer("‚è≥ –ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∞—Å—å.")
            conn.close()
            return

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        cur.execute("""
            UPDATE games
            SET status = 'finished', finished_at = NOW()
            WHERE id = %s
        """, (game["id"],))
        conn.commit()
        conn.close()

        await message.answer("üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã: {e}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


@router.message(lambda m: m.text == "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def show_stats(message: Message):
    # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
