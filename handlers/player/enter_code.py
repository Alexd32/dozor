import logging
import re
from aiogram import Router
from aiogram.types import Message
from db import get_connection, get_game_status
from limits import *

router = Router()


def normalize_code(text: str) -> str:
    """–û—á–∏—â–∞–µ–º –∫–æ–¥: —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤, –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ"""
    if not text:
        return ""
    cleaned = re.sub(r'[^A-Za-z0-9]', '', text)
    return cleaned.lower()


@router.message(lambda m: m.text == "–í–≤–µ—Å—Ç–∏ –∫–æ–¥")
async def ask_code(message: Message):
    game = get_game_status()
    if not game:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        return

    if game["status"] == "not_started":
        await message.answer("‚è≥ –ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å.")
        return
    if game["status"] == "finished":
        await message.answer("üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    username = message.from_user.username
    if not username:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç username –≤ Telegram.")
        return

    try:
        conn = get_connection()
        cur = conn.cursor(dictionary=True)

        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        cur.execute("""
            SELECT pt.id, pt.seq_num
            FROM player_tasks pt
            JOIN players p ON p.id = pt.player_id
            WHERE p.username = %s AND pt.game_id = %s
              AND pt.status IN ('waiting_answer','hint1_sent','hint2_sent')
            ORDER BY pt.seq_num ASC
            LIMIT 1
        """, (username, game["id"]))
        active = cur.fetchone()

        if active:
            await message.answer("‚å®Ô∏è –í–≤–µ–¥–∏ –∫–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–æ–¥–Ω–æ —Å–ª–æ–≤–æ, –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ —Ü–∏—Ñ—Ä—ã).")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è
            cur.execute("""
                SELECT COUNT(*) as cnt
                FROM player_tasks pt
                JOIN players p ON p.id = pt.player_id
                WHERE p.username = %s AND pt.game_id = %s
                  AND pt.status = 'not_started'
            """, (username, game["id"]))
            row = cur.fetchone()
            if row["cnt"] > 0:
                await message.answer("üì≠ –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ.")
            else:
                await message.answer("üéâ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

        conn.close()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ ask_code: {e}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞: {e}")


@router.message(lambda m: not m.text.startswith("/") and len(m.text) <= 50)
async def enter_code(message: Message):
    game = get_game_status()
    if not game or game["status"] != "in_progress":
        return

    username = message.from_user.username
    if not username:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç username –≤ Telegram.")
        return

    try:
        conn = get_connection()
        cur = conn.cursor(dictionary=True)

        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        cur.execute("""
            SELECT pt.id as player_task_id, pt.seq_num, t.answer_code
            FROM player_tasks pt
            JOIN tasks t ON pt.task_id = t.id
            JOIN players p ON p.id = pt.player_id
            WHERE p.username = %s AND pt.game_id = %s
              AND pt.status IN ('waiting_answer','hint1_sent','hint2_sent')
            ORDER BY pt.seq_num ASC
            LIMIT 1
        """, (username, game["id"]))
        row = cur.fetchone()

        if not row:
            await message.answer("üì≠ –£ —Ç–µ–±—è —Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
            conn.close()
            return

        user_code = normalize_code(message.text)
        correct_code = normalize_code(row["answer_code"])

        if not user_code:
            await message.answer("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä.")
            conn.close()
            return

        if user_code == correct_code:
            cur.execute("""
                UPDATE player_tasks
                SET status='success', finished_at=NOW()
                WHERE id=%s
            """, (row["player_task_id"],))
            conn.commit()
            conn.close()
            await message.answer(f"‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç! –ó–∞–¥–∞–Ω–∏–µ #{row['seq_num']} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ enter_code: {e}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞: {e}")
