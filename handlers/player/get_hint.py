import logging
from datetime import datetime
from aiogram import Router
from aiogram.types import Message
from db import get_connection, get_game_status
from limits import *

router = Router()


@router.message(lambda m: m.text == "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É")
async def get_hint(message: Message):
    game = get_game_status()
    if not game:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        return

    if game["status"] == "not_started":
        await message.answer("‚è≥ –ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å.")
        return

    if game["status"] == "finished":
        await message.answer("üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    username = message.from_user.username
    if not username:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç username –≤ Telegram.")
        return

    try:
        conn = get_connection()
        cur = conn.cursor(dictionary=True)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        cur.execute("SELECT id FROM players WHERE username = %s", (username,))
        player = cur.fetchone()
        if not player:
            await message.answer("‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∏–≥—Ä–µ.")
            conn.close()
            return

        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        cur.execute("""
            SELECT pt.id as player_task_id, pt.status, pt.started_at, pt.seq_num,
                   t.hint1, t.hint2
            FROM player_tasks pt
            JOIN tasks t ON pt.task_id = t.id
            WHERE pt.player_id = %s AND pt.game_id = %s
              AND pt.status IN ('waiting_answer','hint1','hint2')
            ORDER BY pt.seq_num ASC
            LIMIT 1
        """, (player["id"], game["id"]))
        row = cur.fetchone()

        if not row:
            await message.answer("üì≠ –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ.")
            conn.close()
            return

        started_at = row["started_at"]
        now = datetime.now()
        elapsed_minutes = int((now - started_at).total_seconds() // 60)

        # 1-—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
        if row["status"] == "waiting_answer":
            if elapsed_minutes < HINT1_DELAY:
                await message.answer(f"‚è≥ –ü–µ—Ä–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {HINT1_DELAY - elapsed_minutes} –º–∏–Ω.")
            else:
                cur.execute("UPDATE player_tasks SET status='hint1' WHERE id=%s", (row["player_task_id"],))
                cur.execute("""
                    UPDATE game_players
                    SET status='hint1',
                        hint1_at=NOW(),
                        last_action_at=NOW(),
                        current_task=%s
                    WHERE game_id=%s AND player_id=%s
                """, (row["seq_num"], game["id"], player["id"]))
                conn.commit()
                await message.answer(f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ 1:\n{row['hint1']}")

        # 2-—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
        elif row["status"] == "hint1":
            if elapsed_minutes < HINT2_DELAY:
                await message.answer(f"‚è≥ –í—Ç–æ—Ä–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {HINT2_DELAY - elapsed_minutes} –º–∏–Ω.")
            else:
                cur.execute("UPDATE player_tasks SET status='hint2' WHERE id=%s", (row["player_task_id"],))
                cur.execute("""
                    UPDATE game_players
                    SET status='hint2',
                        hint2_at=NOW(),
                        last_action_at=NOW(),
                        current_task=%s
                    WHERE game_id=%s AND player_id=%s
                """, (row["seq_num"], game["id"], player["id"]))
                conn.commit()
                await message.answer(f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ 2:\n{row['hint2']}")

        # –ë–æ–ª—å—à–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–µ—Ç
        elif row["status"] == "hint2":
            await message.answer("‚ùå –ë–æ–ª—å—à–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–µ—Ç.")

        conn.close()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏: {e}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏: {e}")
