import logging
from aiogram import Router
from aiogram.types import Message
from db import get_connection, get_game_status
from keyboards import player_kb

router = Router()


@router.message(lambda m: m.text == "–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def get_task(message: Message):
    game = get_game_status()
    if not game:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        return

    if game["status"] == "not_started":
        await message.answer("‚è≥ –ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å.")
        return

    if game["status"] == "finished":
        await message.answer("üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    username = message.from_user.username
    if not username:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç username –≤ Telegram.")
        return

    try:
        conn = get_connection()
        cur = conn.cursor(dictionary=True)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        cur.execute("SELECT id, team_name FROM players WHERE username = %s", (username,))
        player = cur.fetchone()
        if not player:
            await message.answer("‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∏–≥—Ä–µ.")
            conn.close()
            return

        # –ò—â–µ–º –∑–∞–¥–∞–Ω–∏–µ
        cur.execute("""
            SELECT pt.id as player_task_id, pt.seq_num, t.text
            FROM player_tasks pt
            JOIN tasks t ON pt.task_id = t.id
            WHERE pt.player_id = %s AND pt.game_id = %s
              AND pt.status = 'not_started'
            ORDER BY pt.seq_num ASC
            LIMIT 1
        """, (player["id"], game["id"]))
        row = cur.fetchone()

        if not row:
            await message.answer("üéâ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
            conn.close()
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        cur.execute("""
            UPDATE player_tasks
            SET status = 'waiting_answer', started_at = NOW()
            WHERE id = %s
        """, (row["player_task_id"],))
        conn.commit()
        conn.close()

        await message.answer(
            f"üìú –ó–∞–¥–∞–Ω–∏–µ #{row['seq_num']} –¥–ª—è –∫–æ–º–∞–Ω–¥—ã *{player['team_name']}*:\n\n{row['text']}",
            parse_mode="Markdown",
            reply_markup=player_kb
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
