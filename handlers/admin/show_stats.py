import logging
from aiogram import Router
from aiogram.types import Message
from db import get_connection, get_game_status

router = Router()

@router.message(lambda m: m.text == "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def show_stats(message: Message):
    try:
        game = get_game_status()
        if not game:
            await message.answer("‚ö†Ô∏è –í –±–∞–∑–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä.")
            return

        status_map_game = {
            "not_started": "–ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å",
            "in_progress": "–ò–≥—Ä–∞ –∏–¥—ë—Ç",
            "finished": "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        }
        game_status_text = status_map_game.get(game["status"], game["status"])

        conn = get_connection()
        cur = conn.cursor(dictionary=True)
        cur.execute("""
            SELECT gp.team, p.username, pt.seq_num, t.name AS task_name, pt.status
            FROM game_players gp
            JOIN players p ON p.id = gp.player_id
            LEFT JOIN player_tasks pt ON gp.player_id = pt.player_id AND gp.game_id = pt.game_id
            LEFT JOIN tasks t ON pt.task_id = t.id
            WHERE gp.game_id = %s
            ORDER BY gp.team, pt.seq_num
        """, (game["id"],))
        rows = cur.fetchall()
        conn.close()

        if not rows:
            await message.answer(f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–µ</b>\n–°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã: <b>{game_status_text}</b>\n\n‚ùå –ò–≥—Ä–æ–∫–æ–≤ –Ω–µ—Ç.", parse_mode="HTML")
            return

        # –°–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–≥—Ä–æ–∫–∞–º
        stats = {}
        for r in rows:
            key = (r["team"], r["username"])
            if key not in stats:
                stats[key] = []
            if r["seq_num"] is not None:
                stats[key].append({
                    "seq_num": r["seq_num"],
                    "task_name": r["task_name"] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                    "status": r["status"]
                })

        # –°—Ç—Ä–æ–∏–º —Ç–µ–∫—Å—Ç
        text = [f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–µ</b>\n–°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã: <b>{game_status_text}</b>\n"]
        for (team, username), tasks in stats.items():
            text.append(f"\nüë• <b>–ö–æ–º–∞–Ω–¥–∞:</b> {team} (<i>@{username}</i>)")
            if not tasks:
                text.append("  ‚Ä¢ –ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç")
            else:
                for t in tasks:
                    status_map = {
                        "waiting_answer": "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ",
                        "hint1": "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ 1",
                        "hint2": "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ 2",
                        "success": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                        "timeout": "‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ",
                        "finished": "üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                        None: "‚Äî"
                    }
                    st = status_map.get(t["status"], "‚Äî")
                    text.append(f"  ‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ {t['seq_num']}: {t['task_name']} ‚Äî {st}")

        await message.answer("\n".join(text), parse_mode="HTML")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
