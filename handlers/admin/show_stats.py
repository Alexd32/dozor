import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message
from db import get_connection

router = Router(name="admin_show_stats")

@router.message(F.text == "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def show_stats(message: Message):
    """
    –û—Ç—á—ë—Ç –ø–æ –∏–≥—Ä–µ:
    - –í —à–∞–ø–∫–µ: —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã + —Ç–µ–∫—É—â–µ–µ –æ–±—â–µ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã
    - –î–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã:
        ‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è (–æ—Ç games.started_at –¥–æ:
            ‚Ä¢ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—à–ª–∞ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è;
            ‚Ä¢ games.finished_at, –µ—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º;
            ‚Ä¢ now(), –µ—Å–ª–∏ –∏–≥—Ä–∞ –µ—â—ë –∏–¥—ë—Ç)
        üïí –ß–∏—Å—Ç–æ–µ –≤—Ä–µ–º—è (—Å—É–º–º–∞ success: finished_at - started_at)
        + —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    - –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –æ–±—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
    """
    try:
        conn = get_connection()
        cur = conn.cursor(dictionary=True)

        # –ò–≥—Ä–∞
        cur.execute("SELECT id, status, started_at, finished_at FROM games ORDER BY id DESC LIMIT 1")
        game = cur.fetchone()
        if not game:
            await message.answer("‚ö†Ô∏è –í –±–∞–∑–µ –Ω–µ—Ç –∏–≥—Ä.")
            return

        status_map = {
            "not_started": "–ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å",
            "in_progress": "–ò–≥—Ä–∞ –∏–¥—ë—Ç",
            "finished": "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        }
        started_at = game["started_at"]
        finished_at = game["finished_at"]
        now = datetime.now()

        # –¢–µ–∫—É—â–µ–µ –æ–±—â–µ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã
        game_elapsed_str = "‚Äî"
        if started_at:
            if game["status"] == "finished" and finished_at:
                dt = finished_at - started_at
            else:
                dt = now - started_at
            game_elapsed_str = format_td(dt)

        # –ó–∞—Ä–∞–Ω–µ–µ —É–∑–Ω–∞—ë–º, —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π –≤ –∏–≥—Ä–µ (–Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª –≤—Å–µ)
        cur.execute("SELECT COUNT(*) AS cnt FROM tasks WHERE game_id = %s", (game["id"],))
        tasks_total = (cur.fetchone() or {}).get("cnt", 0)

        # –î–∞–Ω–Ω—ã–µ –ø–æ –∏–≥—Ä–æ–∫–∞–º/–∫–æ–º–∞–Ω–¥–∞–º –∏ –∑–∞–¥–∞–Ω–∏—è–º
        cur.execute("""
            SELECT gp.team,
                   p.username,
                   pt.seq_num,
                   t.name AS task_name,
                   pt.status,
                   pt.started_at AS task_start,
                   pt.finished_at AS task_finish
              FROM game_players gp
              JOIN players p
                ON p.id = gp.player_id
         LEFT JOIN player_tasks pt
                ON pt.player_id = gp.player_id AND pt.game_id = gp.game_id
         LEFT JOIN tasks t
                ON t.id = pt.task_id
             WHERE gp.game_id = %s
          ORDER BY gp.team, pt.seq_num
        """, (game["id"],))
        rows = cur.fetchall()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        teams = {}  # key: (team, username)
        for r in rows:
            key = (r["team"], r["username"])
            if key not in teams:
                teams[key] = {
                    "tasks": [],
                    "pure_seconds": 0,
                    "last_success_finish": None,
                    "success_count": 0
                }
            # –ö–æ–ø–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á
            if r["seq_num"] is not None:
                status_view = {
                    "waiting_answer": "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ",
                    "hint1": "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ 1",
                    "hint2": "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ 2",
                    "success": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                    "timeout": "‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ",
                    "finished": "üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                    "not_started": "‚Äî",
                    None: "‚Äî"
                }.get(r["status"], "‚Äî")

                teams[key]["tasks"].append(
                    f"  ‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ {r['seq_num']}: {r.get('task_name') or '‚Äî'} ‚Äî {status_view}"
                )

                # –ß–∏—Å—Ç–æ–µ –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –ø–æ success
                if r["status"] == "success" and r["task_start"] and r["task_finish"]:
                    sec = int((r["task_finish"] - r["task_start"]).total_seconds())
                    teams[key]["pure_seconds"] += max(sec, 0)
                    teams[key]["success_count"] += 1
                    if (teams[key]["last_success_finish"] is None) or (r["task_finish"] > teams[key]["last_success_finish"]):
                        teams[key]["last_success_finish"] = r["task_finish"]

        # –°—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        results = []
        for (team, username), data in teams.items():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–æ—à–ª–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –í–°–ï –∑–∞–¥–∞–Ω–∏—è
            finished_all = (tasks_total > 0 and data["success_count"] >= tasks_total)

            # –°—Ç–æ–ø-–≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            stop_time = None
            if finished_all and data["last_success_finish"]:
                stop_time = data["last_success_finish"]
            elif game["status"] == "finished" and finished_at:
                stop_time = finished_at
            elif game["status"] == "in_progress":
                stop_time = now

            # –û–±—â–µ–µ –≤—Ä–µ–º—è
            elapsed_seconds = None
            elapsed_str = "‚Äî"
            if started_at and stop_time:
                delta = stop_time - started_at
                elapsed_seconds = max(int(delta.total_seconds()), 0)
                elapsed_str = format_sec(elapsed_seconds)

            pure_str = "‚Äî"
            if data["pure_seconds"] > 0:
                pure_str = format_sec(data["pure_seconds"])

            results.append({
                "team": team,
                "username": username,
                "elapsed_seconds": elapsed_seconds,
                "elapsed_str": elapsed_str,
                "pure_str": pure_str,
                "tasks": data["tasks"]
            })

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = [
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–µ</b>",
            f"–°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã: <b>{status_map.get(game['status'], game['status'])}</b>",
            f"‚è± –í—Ä–µ–º—è –∏–≥—Ä—ã: <b>{game_elapsed_str}</b>",
            ""
        ]

        for r in results:
            text.append(f"üë• <b>–ö–æ–º–∞–Ω–¥–∞:</b> {r['team']} (<i>@{r['username']}</i>)")
            text.append(f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: <b>{r['elapsed_str']}</b>")
            text.append(f"üïí –ß–∏—Å—Ç–æ–µ –≤—Ä–µ–º—è –∑–∞–¥–∞–Ω–∏–π: <b>{r['pure_str']}</b>")
            text.extend(r["tasks"] or ["  ‚Ä¢ –ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç"])
            text.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

        # –†–µ–π—Ç–∏–Ω–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        if game["status"] == "finished":
            sortable = [r for r in results if r["elapsed_seconds"] is not None]
            sortable.sort(key=lambda x: x["elapsed_seconds"])
            text.append("üèÜ <b>–†–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ (–ø–æ –æ–±—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã):</b>")
            if not sortable:
                text.append("‚Äî")
            else:
                for i, r in enumerate(sortable, 1):
                    line = f"{i} –º–µ—Å—Ç–æ ‚Äî {r['team']} (@{r['username']}) ‚Äî {r['elapsed_str']}"
                    text.append(f"<b>{line}</b>" if i == 1 else line)

        await message.answer("\n".join(text), parse_mode="HTML")

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    finally:
        try:
            cur.close()
            conn.close()
        except Exception:
            pass


def format_td(td):
    return format_sec(int(td.total_seconds()))

def format_sec(seconds: int) -> str:
    h, rem = divmod(max(0, seconds), 3600)
    m, s = divmod(rem, 60)
    if h:
        return f"{h} —á {m} –º–∏–Ω {s} —Å–µ–∫"
    if m:
        return f"{m} –º–∏–Ω {s} —Å–µ–∫"
    return f"{s} —Å–µ–∫"
