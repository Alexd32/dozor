import asyncio
import logging
import mysql.connector
from aiogram import Bot, Dispatcher
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import config

logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=config.TELEGRAM_TOKEN)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–≥—Ä–æ–∫–∞
player_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")],
        [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É")],
        [KeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∫–æ–¥")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞
admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞")],
        [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î")]
    ],
    resize_keyboard=True
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
def is_admin(username: str) -> bool:
    return username and username.lower() in [u.lower() for u in config.ADMINS]

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
def get_connection():
    return mysql.connector.connect(**config.DB_CONFIG)

# –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
def get_game_status():
    conn = get_connection()
    cur = conn.cursor(dictionary=True)
    cur.execute("SELECT id, status FROM games ORDER BY id DESC LIMIT 1")
    row = cur.fetchone()
    conn.close()
    return row  # {'id': 1, 'status': 'in_progress'} –∏–ª–∏ None

# /start (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ)
@dp.message(Command("start"))
async def start_cmd(message: Message):
    username = message.from_user.username

    if is_admin(username):
        await message.answer("üëë –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –í–æ—Ç —Ç–≤–æ–∏ –∫–Ω–æ–ø–∫–∏:", reply_markup=admin_kb)
        return

    if not username:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç username –≤ Telegram. –£—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return

    try:
        conn = get_connection()
        cur = conn.cursor(dictionary=True)
        cur.execute("""
            SELECT gp.team
            FROM game_players gp
            JOIN players p ON gp.player_id = p.id
            WHERE p.username = %s
            LIMIT 1
        """, (username,))
        row = cur.fetchone()
        conn.close()

        if row:
            await message.answer(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: {row['team']}", reply_markup=player_kb)
        else:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

# –ò–≥—Ä–æ–∫: –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
@dp.message(lambda m: m.text == "–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def get_task(message: Message):
    game = get_game_status()
    if not game or game["status"] == "not_started":
        await message.answer("‚è≥ –ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å")
        return
    if game["status"] == "finished":
        await message.answer("üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return

    # TODO: –ª–æ–≥–∏–∫–∞ –≤—ã–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è
    await message.answer("üìú –¢–µ—Å—Ç: –≤—ã–¥–∞—ë–º –∑–∞–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫—É.")

# –ò–≥—Ä–æ–∫: –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
@dp.message(lambda m: m.text == "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É")
async def get_hint(message: Message):
    game = get_game_status()
    if not game or game["status"] == "not_started":
        await message.answer("‚è≥ –ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å")
        return
    if game["status"] == "finished":
        await message.answer("üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return

    # TODO: –ª–æ–≥–∏–∫–∞ –≤—ã–¥–∞—á–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    await message.answer("üí° –¢–µ—Å—Ç: –≤—ã–¥–∞—ë–º –ø–æ–¥—Å–∫–∞–∑–∫—É.")

# –ò–≥—Ä–æ–∫: –≤–≤–µ—Å—Ç–∏ –∫–æ–¥
@dp.message(lambda m: m.text == "–í–≤–µ—Å—Ç–∏ –∫–æ–¥")
async def enter_code(message: Message):
    game = get_game_status()
    if not game or game["status"] == "not_started":
        await message.answer("‚è≥ –ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å")
        return
    if game["status"] == "finished":
        await message.answer("üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return

    # TODO: –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
    await message.answer("üîë –¢–µ—Å—Ç: –≤–≤–µ–¥–∏ –∫–æ–¥ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è.")

# –ê–¥–º–∏–Ω: —Ç–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
@dp.message(lambda m: m.text == "–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞")
async def test_button(message: Message):
    if is_admin(message.from_user.username):
        print(f"[SERVER] –ö–æ–º–∞–Ω–¥–∞ –æ—Ç @{message.from_user.username}")
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (—Ç–µ—Å—Ç).")
    else:
        await message.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")

# –ê–¥–º–∏–Ω: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
@dp.message(lambda m: m.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î")
async def check_db(message: Message):
    if is_admin(message.from_user.username):
        try:
            conn = get_connection()
            cur = conn.cursor()
            cur.execute("SELECT NOW()")
            ts = cur.fetchone()[0]
            conn.close()
            await message.answer(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ!\n–í—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {ts}")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
    else:
        await message.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")

# –§–æ–Ω–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∞–º
async def send_test_message():
    inactive_admins = []
    for admin in config.ADMINS:
        try:
            chat = await bot.get_chat(f"@{admin}")
            await bot.send_message(chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ")
        except Exception as e:
            inactive_admins.append(admin)
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ @{admin}: {e}")
    if inactive_admins:
        logging.warning(f"–≠—Ç–∏ –∞–¥–º–∏–Ω—ã –µ—â—ë –Ω–µ –Ω–∞–∂–∞–ª–∏ /start: {', '.join(inactive_admins)}")

# –§–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª
async def background_loop():
    while True:
        await send_test_message()
        await asyncio.sleep(30)

# –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    asyncio.create_task(background_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
